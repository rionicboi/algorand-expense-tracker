/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"ExpenseTracker","structs":{},"methods":[{"name":"addExpense","args":[{"type":"uint64","name":"amount"},{"type":"byte[]","name":"description"}],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getTotal","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getLastExpense","args":[],"returns":{"type":"byte[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":1,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"totalExpenses":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxFeHBlbnNlcw=="},"lastExpense":{"keyType":"AVMString","valueType":"AVMBytes","key":"bGFzdEV4cGVuc2U="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[176],"errorMessage":"Amount must be greater than zero"},{"pc":[88,112,129],"errorMessage":"OnCompletion is not NoOp"},{"pc":[168],"errorMessage":"can only call when creating"},{"pc":[91,115,132],"errorMessage":"can only call when not creating"},{"pc":[180,197,202],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxCiAgICBieXRlY2Jsb2NrICJ0b3RhbEV4cGVuc2VzIiAibGFzdEV4cGVuc2UiIDB4MTUxZjdjNzUKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjUKICAgIC8vIHRvdGFsRXhwZW5zZXMgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsga2V5OiAidG90YWxFeHBlbnNlcyIsIGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBieXRlY18wIC8vICJ0b3RhbEV4cGVuc2VzIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czo4CiAgICAvLyBsYXN0RXhwZW5zZSA9IEdsb2JhbFN0YXRlPGJ5dGVzPih7IGtleTogImxhc3RFeHBlbnNlIiwgaW5pdGlhbFZhbHVlOiBCeXRlcygiIikgfSkKICAgIGJ5dGVjXzEgLy8gImxhc3RFeHBlbnNlIgogICAgcHVzaGJ5dGVzICIiCiAgICBhcHBfZ2xvYmFsX3B1dAoKbWFpbl9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czozCiAgICAvLyBleHBvcnQgY2xhc3MgRXhwZW5zZVRyYWNrZXIgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAMTAKICAgIHB1c2hieXRlc3MgMHg4ODc1OWZkMSAweGMyNDc4OTFmIDB4NDI3YjRmZjMgLy8gbWV0aG9kICJhZGRFeHBlbnNlKHVpbnQ2NCxieXRlW10pYnl0ZVtdIiwgbWV0aG9kICJnZXRUb3RhbCgpdWludDY0IiwgbWV0aG9kICJnZXRMYXN0RXhwZW5zZSgpYnl0ZVtdIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9hZGRFeHBlbnNlX3JvdXRlQDUgbWFpbl9nZXRUb3RhbF9yb3V0ZUA2IG1haW5fZ2V0TGFzdEV4cGVuc2Vfcm91dGVANwoKbWFpbl9hZnRlcl9pZl9lbHNlQDE0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6MwogICAgLy8gZXhwb3J0IGNsYXNzIEV4cGVuc2VUcmFja2VyIGV4dGVuZHMgQ29udHJhY3QgewogICAgaW50Y18wIC8vIDAKICAgIHJldHVybgoKbWFpbl9nZXRMYXN0RXhwZW5zZV9yb3V0ZUA3OgogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6MjYKICAgIC8vIGdldExhc3RFeHBlbnNlKCk6IGJ5dGVzIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBnZXRMYXN0RXhwZW5zZQogICAgZHVwCiAgICBsZW4KICAgIGl0b2IKICAgIGV4dHJhY3QgNiAyCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGJ5dGVjXzIgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fZ2V0VG90YWxfcm91dGVANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjIxCiAgICAvLyBnZXRUb3RhbCgpOiB1aW50NjQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGdldFRvdGFsCiAgICBpdG9iCiAgICBieXRlY18yIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2FkZEV4cGVuc2Vfcm91dGVANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjExCiAgICAvLyBhZGRFeHBlbnNlKGFtb3VudDogdWludDY0LCBkZXNjcmlwdGlvbjogYnl0ZXMpOiBieXRlcyB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjMKICAgIC8vIGV4cG9ydCBjbGFzcyBFeHBlbnNlVHJhY2tlciBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGV4dHJhY3QgMiAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czoxMQogICAgLy8gYWRkRXhwZW5zZShhbW91bnQ6IHVpbnQ2NCwgZGVzY3JpcHRpb246IGJ5dGVzKTogYnl0ZXMgewogICAgY2FsbHN1YiBhZGRFeHBlbnNlCiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWNfMiAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdAMTA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czozCiAgICAvLyBleHBvcnQgY2xhc3MgRXhwZW5zZVRyYWNrZXIgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDE0CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjpFeHBlbnNlVHJhY2tlci5hZGRFeHBlbnNlKGFtb3VudDogdWludDY0LCBkZXNjcmlwdGlvbjogYnl0ZXMpIC0+IGJ5dGVzOgphZGRFeHBlbnNlOgogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6MTEKICAgIC8vIGFkZEV4cGVuc2UoYW1vdW50OiB1aW50NjQsIGRlc2NyaXB0aW9uOiBieXRlcyk6IGJ5dGVzIHsKICAgIHByb3RvIDIgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6MTIKICAgIC8vIGFzc2VydChhbW91bnQgPiBVaW50NjQoMCksICJBbW91bnQgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVybyIpCiAgICBmcmFtZV9kaWcgLTIKICAgIGFzc2VydCAvLyBBbW91bnQgbXVzdCBiZSBncmVhdGVyIHRoYW4gemVybwogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6NQogICAgLy8gdG90YWxFeHBlbnNlcyA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBrZXk6ICJ0b3RhbEV4cGVuc2VzIiwgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJ0b3RhbEV4cGVuc2VzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjE0CiAgICAvLyB0aGlzLnRvdGFsRXhwZW5zZXMudmFsdWUgPSBVaW50NjQodGhpcy50b3RhbEV4cGVuc2VzLnZhbHVlICsgYW1vdW50KQogICAgZnJhbWVfZGlnIC0yCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czo1CiAgICAvLyB0b3RhbEV4cGVuc2VzID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogInRvdGFsRXhwZW5zZXMiLCBpbml0aWFsVmFsdWU6IFVpbnQ2NCgwKSB9KQogICAgYnl0ZWNfMCAvLyAidG90YWxFeHBlbnNlcyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjE0CiAgICAvLyB0aGlzLnRvdGFsRXhwZW5zZXMudmFsdWUgPSBVaW50NjQodGhpcy50b3RhbEV4cGVuc2VzLnZhbHVlICsgYW1vdW50KQogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjgKICAgIC8vIGxhc3RFeHBlbnNlID0gR2xvYmFsU3RhdGU8Ynl0ZXM+KHsga2V5OiAibGFzdEV4cGVuc2UiLCBpbml0aWFsVmFsdWU6IEJ5dGVzKCIiKSB9KQogICAgYnl0ZWNfMSAvLyAibGFzdEV4cGVuc2UiCiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czoxNQogICAgLy8gdGhpcy5sYXN0RXhwZW5zZS52YWx1ZSA9IGRlc2NyaXB0aW9uCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czoxNwogICAgLy8gcmV0dXJuIGRlc2NyaXB0aW9uCiAgICBmcmFtZV9kaWcgLTEKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjpFeHBlbnNlVHJhY2tlci5nZXRUb3RhbCgpIC0+IHVpbnQ2NDoKZ2V0VG90YWw6CiAgICAvLyBzbWFydF9jb250cmFjdHMvaGVsbG9fd29ybGQvY29udHJhY3QuYWxnby50czo1CiAgICAvLyB0b3RhbEV4cGVuc2VzID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGtleTogInRvdGFsRXhwZW5zZXMiLCBpbml0aWFsVmFsdWU6IFVpbnQ2NCgwKSB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gInRvdGFsRXhwZW5zZXMiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2hlbGxvX3dvcmxkL2NvbnRyYWN0LmFsZ28udHM6MjIKICAgIC8vIHJldHVybiB0aGlzLnRvdGFsRXhwZW5zZXMudmFsdWUKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjpFeHBlbnNlVHJhY2tlci5nZXRMYXN0RXhwZW5zZSgpIC0+IGJ5dGVzOgpnZXRMYXN0RXhwZW5zZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjgKICAgIC8vIGxhc3RFeHBlbnNlID0gR2xvYmFsU3RhdGU8Ynl0ZXM+KHsga2V5OiAibGFzdEV4cGVuc2UiLCBpbml0aWFsVmFsdWU6IEJ5dGVzKCIiKSB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gImxhc3RFeHBlbnNlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9oZWxsb193b3JsZC9jb250cmFjdC5hbGdvLnRzOjI3CiAgICAvLyByZXR1cm4gdGhpcy5sYXN0RXhwZW5zZS52YWx1ZQogICAgcmV0c3ViCg==","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAAEmAw10b3RhbEV4cGVuc2VzC2xhc3RFeHBlbnNlBBUffHUxGEAABygiZymAAGcxG0EAaYIDBIh1n9EEwkeJHwRCe0/zNhoAjgMAKwAaAAIiQzEZFEQxGESIAGhJFRZXBgJMUCpMULAjQzEZFEQxGESIAEsWKkxQsCNDMRkURDEYRDYaARc2GgJXAgCIABlJFRZXBgJMUCpMULAjQzEZQP+uMRgURCNDigIBi/5EIihlRIv+CChMZymL/2eL/4kiKGVEiSIpZUSJ","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the ExpenseTracker contract
 */
export type ExpenseTrackerArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'addExpense(uint64,byte[])byte[]': {
      amount: bigint | number
      description: Uint8Array
    }
    'getTotal()uint64': Record<string, never>
    'getLastExpense()byte[]': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'addExpense(uint64,byte[])byte[]': [amount: bigint | number, description: Uint8Array]
    'getTotal()uint64': []
    'getLastExpense()byte[]': []
  }
}

/**
 * The return type for each method
 */
export type ExpenseTrackerReturns = {
  'addExpense(uint64,byte[])byte[]': Uint8Array
  'getTotal()uint64': bigint
  'getLastExpense()byte[]': Uint8Array
}

/**
 * Defines the types of available calls and state of the ExpenseTracker smart contract.
 */
export type ExpenseTrackerTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'addExpense(uint64,byte[])byte[]' | 'addExpense', {
      argsObj: ExpenseTrackerArgs['obj']['addExpense(uint64,byte[])byte[]']
      argsTuple: ExpenseTrackerArgs['tuple']['addExpense(uint64,byte[])byte[]']
      returns: ExpenseTrackerReturns['addExpense(uint64,byte[])byte[]']
    }>
    & Record<'getTotal()uint64' | 'getTotal', {
      argsObj: ExpenseTrackerArgs['obj']['getTotal()uint64']
      argsTuple: ExpenseTrackerArgs['tuple']['getTotal()uint64']
      returns: ExpenseTrackerReturns['getTotal()uint64']
    }>
    & Record<'getLastExpense()byte[]' | 'getLastExpense', {
      argsObj: ExpenseTrackerArgs['obj']['getLastExpense()byte[]']
      argsTuple: ExpenseTrackerArgs['tuple']['getLastExpense()byte[]']
      returns: ExpenseTrackerReturns['getLastExpense()byte[]']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        totalExpenses: bigint
        lastExpense: BinaryState
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type ExpenseTrackerSignatures = keyof ExpenseTrackerTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ExpenseTrackerNonVoidMethodSignatures = keyof ExpenseTrackerTypes['methods'] extends infer T ? T extends keyof ExpenseTrackerTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the ExpenseTracker smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ExpenseTrackerSignatures> = ExpenseTrackerTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ExpenseTracker smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ExpenseTrackerSignatures> = ExpenseTrackerTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = ExpenseTrackerTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type ExpenseTrackerCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type ExpenseTrackerDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ExpenseTrackerCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the ExpenseTracker smart contract
 */
export abstract class ExpenseTrackerParamsFactory {
  /**
   * Constructs a no op call for the addExpense(uint64,byte[])byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addExpense(params: CallParams<ExpenseTrackerArgs['obj']['addExpense(uint64,byte[])byte[]'] | ExpenseTrackerArgs['tuple']['addExpense(uint64,byte[])byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addExpense(uint64,byte[])byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount, params.args.description],
    }
  }
  /**
   * Constructs a no op call for the getTotal()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getTotal(params: CallParams<ExpenseTrackerArgs['obj']['getTotal()uint64'] | ExpenseTrackerArgs['tuple']['getTotal()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getTotal()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getLastExpense()byte[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLastExpense(params: CallParams<ExpenseTrackerArgs['obj']['getLastExpense()byte[]'] | ExpenseTrackerArgs['tuple']['getLastExpense()byte[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getLastExpense()byte[]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ExpenseTracker smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ExpenseTrackerFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ExpenseTrackerFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ExpenseTrackerClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ExpenseTrackerClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ExpenseTracker smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ExpenseTrackerDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new ExpenseTrackerClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ExpenseTracker smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ExpenseTracker smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ExpenseTracker smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new ExpenseTrackerClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ExpenseTracker smart contract
 */
export class ExpenseTrackerClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ExpenseTrackerClient`
   *
   * @param appClient An `AppClient` instance which has been created with the ExpenseTracker app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ExpenseTrackerClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ExpenseTrackerNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `ExpenseTrackerClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ExpenseTrackerClient> {
    return new ExpenseTrackerClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ExpenseTrackerClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ExpenseTrackerClient> {
    return new ExpenseTrackerClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ExpenseTracker smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ExpenseTracker smart contract using the `addExpense(uint64,byte[])byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addExpense: (params: CallParams<ExpenseTrackerArgs['obj']['addExpense(uint64,byte[])byte[]'] | ExpenseTrackerArgs['tuple']['addExpense(uint64,byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ExpenseTrackerParamsFactory.addExpense(params))
    },

    /**
     * Makes a call to the ExpenseTracker smart contract using the `getTotal()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getTotal: (params: CallParams<ExpenseTrackerArgs['obj']['getTotal()uint64'] | ExpenseTrackerArgs['tuple']['getTotal()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ExpenseTrackerParamsFactory.getTotal(params))
    },

    /**
     * Makes a call to the ExpenseTracker smart contract using the `getLastExpense()byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getLastExpense: (params: CallParams<ExpenseTrackerArgs['obj']['getLastExpense()byte[]'] | ExpenseTrackerArgs['tuple']['getLastExpense()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(ExpenseTrackerParamsFactory.getLastExpense(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ExpenseTracker smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ExpenseTracker smart contract using the `addExpense(uint64,byte[])byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addExpense: (params: CallParams<ExpenseTrackerArgs['obj']['addExpense(uint64,byte[])byte[]'] | ExpenseTrackerArgs['tuple']['addExpense(uint64,byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ExpenseTrackerParamsFactory.addExpense(params))
    },

    /**
     * Makes a call to the ExpenseTracker smart contract using the `getTotal()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getTotal: (params: CallParams<ExpenseTrackerArgs['obj']['getTotal()uint64'] | ExpenseTrackerArgs['tuple']['getTotal()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ExpenseTrackerParamsFactory.getTotal(params))
    },

    /**
     * Makes a call to the ExpenseTracker smart contract using the `getLastExpense()byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getLastExpense: (params: CallParams<ExpenseTrackerArgs['obj']['getLastExpense()byte[]'] | ExpenseTrackerArgs['tuple']['getLastExpense()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(ExpenseTrackerParamsFactory.getLastExpense(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ExpenseTracker smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ExpenseTracker smart contract using the `addExpense(uint64,byte[])byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addExpense: async (params: CallParams<ExpenseTrackerArgs['obj']['addExpense(uint64,byte[])byte[]'] | ExpenseTrackerArgs['tuple']['addExpense(uint64,byte[])byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ExpenseTrackerParamsFactory.addExpense(params))
      return {...result, return: result.return as unknown as (undefined | ExpenseTrackerReturns['addExpense(uint64,byte[])byte[]'])}
    },

    /**
     * Makes a call to the ExpenseTracker smart contract using the `getTotal()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getTotal: async (params: CallParams<ExpenseTrackerArgs['obj']['getTotal()uint64'] | ExpenseTrackerArgs['tuple']['getTotal()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ExpenseTrackerParamsFactory.getTotal(params))
      return {...result, return: result.return as unknown as (undefined | ExpenseTrackerReturns['getTotal()uint64'])}
    },

    /**
     * Makes a call to the ExpenseTracker smart contract using the `getLastExpense()byte[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getLastExpense: async (params: CallParams<ExpenseTrackerArgs['obj']['getLastExpense()byte[]'] | ExpenseTrackerArgs['tuple']['getLastExpense()byte[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(ExpenseTrackerParamsFactory.getLastExpense(params))
      return {...result, return: result.return as unknown as (undefined | ExpenseTrackerReturns['getLastExpense()byte[]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ExpenseTrackerClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ExpenseTracker app
   */
  state = {
    /**
     * Methods to access global state for the current ExpenseTracker app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          totalExpenses: result.totalExpenses,
          lastExpense: new BinaryStateValue(result.lastExpense),
        }
      },
      /**
       * Get the current value of the totalExpenses key in global state
       */
      totalExpenses: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalExpenses")) as bigint | undefined },
      /**
       * Get the current value of the lastExpense key in global state
       */
      lastExpense: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("lastExpense")) as Uint8Array | undefined) },
    },
  }

  public newGroup(): ExpenseTrackerComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a addExpense(uint64,byte[])byte[] method call against the ExpenseTracker contract
       */
      addExpense(params: CallParams<ExpenseTrackerArgs['obj']['addExpense(uint64,byte[])byte[]'] | ExpenseTrackerArgs['tuple']['addExpense(uint64,byte[])byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addExpense(params)))
        resultMappers.push((v) => client.decodeReturnValue('addExpense(uint64,byte[])byte[]', v))
        return this
      },
      /**
       * Add a getTotal()uint64 method call against the ExpenseTracker contract
       */
      getTotal(params: CallParams<ExpenseTrackerArgs['obj']['getTotal()uint64'] | ExpenseTrackerArgs['tuple']['getTotal()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getTotal(params)))
        resultMappers.push((v) => client.decodeReturnValue('getTotal()uint64', v))
        return this
      },
      /**
       * Add a getLastExpense()byte[] method call against the ExpenseTracker contract
       */
      getLastExpense(params: CallParams<ExpenseTrackerArgs['obj']['getLastExpense()byte[]'] | ExpenseTrackerArgs['tuple']['getLastExpense()byte[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLastExpense(params)))
        resultMappers.push((v) => client.decodeReturnValue('getLastExpense()byte[]', v))
        return this
      },
      /**
       * Add a clear state call to the ExpenseTracker contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ExpenseTrackerComposer
  }
}
export type ExpenseTrackerComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the addExpense(uint64,byte[])byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addExpense(params?: CallParams<ExpenseTrackerArgs['obj']['addExpense(uint64,byte[])byte[]'] | ExpenseTrackerArgs['tuple']['addExpense(uint64,byte[])byte[]']>): ExpenseTrackerComposer<[...TReturns, ExpenseTrackerReturns['addExpense(uint64,byte[])byte[]'] | undefined]>

  /**
   * Calls the getTotal()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getTotal(params?: CallParams<ExpenseTrackerArgs['obj']['getTotal()uint64'] | ExpenseTrackerArgs['tuple']['getTotal()uint64']>): ExpenseTrackerComposer<[...TReturns, ExpenseTrackerReturns['getTotal()uint64'] | undefined]>

  /**
   * Calls the getLastExpense()byte[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLastExpense(params?: CallParams<ExpenseTrackerArgs['obj']['getLastExpense()byte[]'] | ExpenseTrackerArgs['tuple']['getLastExpense()byte[]']>): ExpenseTrackerComposer<[...TReturns, ExpenseTrackerReturns['getLastExpense()byte[]'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ExpenseTracker smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ExpenseTrackerComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ExpenseTrackerComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ExpenseTrackerComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ExpenseTrackerComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ExpenseTrackerComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ExpenseTrackerComposerResults<TReturns>>
}
export type ExpenseTrackerComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

